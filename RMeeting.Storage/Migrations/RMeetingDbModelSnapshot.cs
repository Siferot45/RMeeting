// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RMeeting.Storage.Context;

#nullable disable

namespace RMeeting.Storage.Migrations
{
    [DbContext(typeof(RMeetingDb))]
    partial class RMeetingDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RMeeting.Storage.Model.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("comment_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("text");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid")
                        .HasColumnName("topic_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId")
                        .HasName("pk_comments");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("ix_comments_topic_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("RMeeting.Storage.Model.CommentsOfComment", b =>
                {
                    b.Property<Guid>("CommentsOfCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("comments_of_comment_id");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("comment_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("CommentsOfCommentId")
                        .HasName("pk_comments_of_comments");

                    b.HasIndex("CommentId")
                        .HasDatabaseName("ix_comments_of_comments_comment_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_of_comments_user_id");

                    b.ToTable("comments_of_comments", (string)null);
                });

            modelBuilder.Entity("RMeeting.Storage.Model.Forum", b =>
                {
                    b.Property<Guid>("ForumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("forum_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.HasKey("ForumId")
                        .HasName("pk_forums");

                    b.ToTable("forums", (string)null);
                });

            modelBuilder.Entity("RMeeting.Storage.Model.LikeComment", b =>
                {
                    b.Property<Guid>("LikeCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("like_comment_id");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("comment_id");

                    b.Property<int>("NumberLike")
                        .HasColumnType("integer")
                        .HasColumnName("number_like");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LikeCommentId")
                        .HasName("pk_like_comments");

                    b.HasIndex("CommentId")
                        .HasDatabaseName("ix_like_comments_comment_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_like_comments_user_id");

                    b.ToTable("like_comments", (string)null);
                });

            modelBuilder.Entity("RMeeting.Storage.Model.Section", b =>
                {
                    b.Property<Guid>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("section_id");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<Guid>("ForumId")
                        .HasColumnType("uuid")
                        .HasColumnName("forum_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.HasKey("SectionId")
                        .HasName("pk_sections");

                    b.HasIndex("ForumId")
                        .HasDatabaseName("ix_sections_forum_id");

                    b.ToTable("sections", (string)null);
                });

            modelBuilder.Entity("RMeeting.Storage.Model.Topic", b =>
                {
                    b.Property<Guid>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("topic_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Reaction")
                        .HasColumnType("integer")
                        .HasColumnName("reaction");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("section_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("TopicId")
                        .HasName("pk_topics");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("ix_topics_section_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_topics_user_id");

                    b.ToTable("topics", (string)null);
                });

            modelBuilder.Entity("RMeeting.Storage.Model.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RMeeting.Storage.Model.Comment", b =>
                {
                    b.HasOne("RMeeting.Storage.Model.Topic", "Topic")
                        .WithMany("Comments")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_topics_topic_id");

                    b.HasOne("RMeeting.Storage.Model.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_users_user_id");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RMeeting.Storage.Model.CommentsOfComment", b =>
                {
                    b.HasOne("RMeeting.Storage.Model.Comment", "Comment")
                        .WithMany("CommentsOfComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_of_comments_comments_comment_id");

                    b.HasOne("RMeeting.Storage.Model.User", "User")
                        .WithMany("CommentsOfComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_of_comments_users_user_id");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RMeeting.Storage.Model.LikeComment", b =>
                {
                    b.HasOne("RMeeting.Storage.Model.Comment", "Comment")
                        .WithMany("LikeComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_like_comments_comments_comment_id");

                    b.HasOne("RMeeting.Storage.Model.User", "User")
                        .WithMany("LikeComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_like_comments_users_user_id");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RMeeting.Storage.Model.Section", b =>
                {
                    b.HasOne("RMeeting.Storage.Model.Forum", "Forum")
                        .WithMany("Sections")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sections_forums_forum_id");

                    b.Navigation("Forum");
                });

            modelBuilder.Entity("RMeeting.Storage.Model.Topic", b =>
                {
                    b.HasOne("RMeeting.Storage.Model.Section", "Section")
                        .WithMany("Topics")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_topics_sections_section_id");

                    b.HasOne("RMeeting.Storage.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_topics_users_user_id");

                    b.Navigation("Section");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RMeeting.Storage.Model.Comment", b =>
                {
                    b.Navigation("CommentsOfComments");

                    b.Navigation("LikeComments");
                });

            modelBuilder.Entity("RMeeting.Storage.Model.Forum", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("RMeeting.Storage.Model.Section", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("RMeeting.Storage.Model.Topic", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("RMeeting.Storage.Model.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CommentsOfComments");

                    b.Navigation("LikeComments");
                });
#pragma warning restore 612, 618
        }
    }
}
